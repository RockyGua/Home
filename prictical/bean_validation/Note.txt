参考资料：https://www.ibm.com/developerworks/cn/java/j-lo-beanvalid/
Hibernate Validator 4.0 是 JSR303 规范的参考实现，本文所有示例代码均使用该参考实现。

Bean Validation 规范对约束的定义包括两部分，一是约束注解，清单 1 中的 @NotNull 就是约束注解；二是约束验证器，
每一个约束注解都存在对应的约束验证器，约束验证器用来验证具体的 Java Bean 是否满足该约束注解声明的条件。

分别自定义了：单值约束，多值约束（适用于多个约束条件），组合约束（可以整合已有的验证标签）

Object Graph 验证
除了支持 Java Bean 的实例验证外，Bean Validation 规范同样支持 Object Graph 的验证。
Object Graph 即为对象的拓扑结构，如对象之间的引用关系。
如果类 A 引用类 B，则在对类 A 的实例进行约束验证时也需要对类 B 的实例进行约束验证，这就是验证的级联性。
当对 Java 语言中的集合、数组等类型进行验证时也需要对该类型的每一个元素进行验证。
完成级联验证的方式就是使用 @Valid 注解。

组
Bean Validation 规范中一个重要的概念，就是组和组序列。
组定义了约束的子集。
对于一个给定的 Object Graph 结构，有了组的概念，则无需对该 Object Graph 中所有的约束进行验证，只需要对该组定义的一个子集进行验证即可。
完成组别验证需要在约束声明时进行组别的声明，否则使用默认的组 Default.class.

组序列
默认情况下，不同组别的约束验证是无序的，然而在某些情况下，约束验证的顺序却很重要，如下面两个例子：
（1）第二个组中的约束验证依赖于一个稳定状态来运行，而这个稳定状态是由第一个组来进行验证的。
（2）某个组的验证比较耗时，CPU 和内存的使用率相对比较大，最优的选择是将其放在最后进行验证。
因此，在进行组验证的时候尚需提供一种有序的验证方式，这就提出了组序列的概念。
一个组可以定义为其他组的序列，使用它进行验证的时候必须符合该序列规定的顺序。
在使用组序列验证的时候，如果序列前边的组验证失败，则后面的组将不再给予验证。